--Assignment no. B2

db.or.insert({Order_id : 1,Cust_id : "A1",Cust_name : "Aryan",Phone_no : [9890151243,8806048721],Email_id : "aryan@gmail.com",Item_name : "Laptop",DtOfOrder : ISODate("2017-06-12T00:00:00Z"),Qty : 2,Amt : 90000,Status : "D"})


db.or.insert({Order_id : 2,Cust_id : "B1",Cust_name : "rohan",Phone_no : [9860151243,8806048723],Item_name : "Watch",DtOfOrder : ISODate("2024-06-12T00:00:00Z"),Qty : 3,Amt : 15000,Status : "P"})


db.or.insert({Order_id : 3,Cust_id : "C1",Cust_name : "Sam",Phone_no : [9960151243,8706048723],Item_name : "Mobile",DtOfOrder : ISODate("2017-02-12T00:00:00Z"),Qty : 2,Amt : 30000,Status : "P"})


db.or.insert({Order_id : 4,Cust_id: "B1",Cust_name : "Carol",Phone_no : [860151243,8806048723],Item_name : "T-shirt",DtOfOrder : ISODate("2017-08-22T00:00:00Z"),Qty : 6,Amt : 12000,Status : "D"})


db.or.insert({Order_id : 5,Cust_id : "C1",Cust_name : "Sam",Phone_no : [9960151243,8706048723],Item_name : "Jio Router",DtOfOrder : ISODate("2017-02-12T00:00:00Z"),Qty: 3,Amt : 6000,Status : "P"})

-- Create a simple index on cust_id and also create a simple index on Item_name. Try  to make a duplicate entry.  
db.or.createIndex({Cust_id:1})  
db.or.createIndex({Item_name:1})  
db.or.getIndexes()  


-- Create unique index on the order_id key and try to make duplicate entry.
 db.or.createIndex({Order_id:1}, {unique:true}) 

-- Create a multikey index on phone_no and find the customers with 2 phone nos. 
 db.or.createIndex({Phone_no:1})  
 db.or.find({Phone_no:{$size:2}}).pretty() 
 
-- Create a sparse index on email_id key and show the effects with and without  indexing. 
(Hint:use find() before and after aplying index. Also use .explain()) 

 db.or.find({Email_id:"aryan@gmail.com"}).explain()  
 db.or.createIndex({Email_id:1},{sparse:true})  
 db.or.find({Email_id:"aryan@gmail.com"}).explain()  

--Display all indexes created on order collection and Also show the size of indexes.  
 db.or.getIndexes()  
db.or.totalIndexSize() 

-- Delete all indexes.  
db.or.dropIndexes()  

--vii. 
--A) Find Total no of orders received so far  
db.or.find({Status:'D'}).count() 
 
--B) how many orders are pending.  
db .orders.find({Status:'P'}).count() 
 
--viii. Display all customer names of orders collection with no repetition  
db.or.distinct("Cust_name")  [ "Aryan", "Carol", "Sam" ]  

--ix. 
--A)Find Total no of orders received so far  
db.or.find({Status:'D'}).count()  

--B)how many orders are pending.  
db.or.find({Status:'P'}).count()  

--x. Show results and details of sorting documents based on amount 
 db.or.find().sort({Amt:1}).pretty()  

--xi. Show how many orders are placed by each customer. 
 
db.or.aggregate({$group:{_id:"$Cust_name",cnt_of_order:{$sum:1}}})  

--xii. Display all customer ids and their total pending order amount in descending order.
  db.or.aggregate({$match:{Status:'P'}}, {$group:{_id:"$Cust_id",  pend_amt: {$sum:"$Amt"}}},{$sort:{pend_amt:-1}})  

--xiii. Display all customer ids in ascending order with total order amount which have  been is delivered.    db.or.aggregate({$match:{Status:'D'}},{$group:{_id:"$Cust_id",tot_amt:{$sum: "$Amt"}}},{$sort:{_id:1}})  

--xiv. Show top three Selling Items from orders collection. 
 db.or.aggregate({$group:{_id:"$Item_name",totqty:{$sum:"$Qty"}}}, {$sort:  {totqty:-1}},{$limit:3}) 
 
--xv. Find the date on which maximum orders are received.  
db.or.aggregate({$group:{_id:"$DtOfOrder",cnt_of_order:{$sum:1}}},{$sort:  {cnt_of_order:-1}},{$limit:1})  
{ "_id" : ISODate("2017-02-12T00:00:00Z"), "cnt_of_order" : 3 } 
 
--xvi. Find which customer has placed maximum orders.  
db.or.aggregate({$group:{_id:"$Cust_name",cnt_orderid:{$sum:1}}},{$sort:  {cnt_orderid:-1}},{$limit:1})  
{ "_id" : "Sam", "cnt_orderid" : 2 } 

